<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosa.snippets.user.mapper.UserMapper">

    <resultMap id="userResultMap" type="kr.or.kosa.snippets.user.model.Users">
        <id property="userId" column="user_id"/>
        <result property="email" column="email"/>
        <result property="nickname" column="nickname"/>
        <result property="password" column="password"/>
        <result property="enabled" column="enabled"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="deletedAt" column="deleted_at"/>
        <result property="reason" column="reason"/>
        <result property="role" column="role"/>
        <result property="loginType" column="login_type"/>
    </resultMap>


    <select id="existsByEmailAndEnabledFalse" resultType="boolean" parameterType="string">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
          AND enabled = false
    </select>
    <select id="existsByEmailAndDisabledAndDeleted" resultType="boolean" parameterType="string">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
          AND enabled = false
          AND deleted_at IS NOT NULL
    </select>

    <select id="findByEmail" parameterType="string" resultMap="userResultMap">
        SELECT *
        FROM users
        WHERE email = #{email}
    </select>

    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
    </select>


    <insert id="insertUser" parameterType="kr.or.kosa.snippets.user.model.Users" useGeneratedKeys="true"
            keyProperty="userId">
        INSERT INTO users (email, nickname, password, enabled, created_at, updated_at, deleted_at, reason, role,login_type)
        VALUES (#{email}, #{nickname}, #{password}, #{enabled}, #{createdAt}, #{updatedAt}, #{deletedAt}, #{reason},
                #{role}, #{loginType})
    </insert>

    <update id="updateUser" parameterType="kr.or.kosa.snippets.user.model.Users">
        UPDATE users
        SET email      = #{email},
            nickname   = #{nickname},
            password   = #{password},
            enabled    = #{enabled},
            created_at = #{createdAt},
            updated_at = #{updatedAt},
            deleted_at = #{deletedAt},
            reason     = #{reason},
            role       = #{role}
        WHERE user_id = #{userId}
    </update>


    <!--비활성화 계정 활성화-->
    <update id="restoreUser" parameterType="string">
        UPDATE users
        SET enabled    = true,
            deleted_at = NULL,
            updated_at = NOW()
        WHERE email = #{email}
          AND enabled = false
          AND deleted_at IS NOT NULL
    </update>
    <!-- 유저 비활성화 찾기  -->
    <select id="findDeletedUser" resultType="kr.or.kosa.snippets.user.model.Users">
        SELECT *
        FROM users
        WHERE email = #{email}
          AND enabled = false
          AND deleted_at IS NOT NULL
    </select>
    <!--비활성 계정 찾기-->
    <select id="findAllByEnabledFalseAndDeletedAtBefore" parameterType="java.time.LocalDateTime"
            resultMap="userResultMap">
        SELECT *
        FROM users
        WHERE enabled = false
          AND deleted_at &lt; #{cutoff}
    </select>

    <!-- 미인증 계정 삭제-->
    <select id="existsByEmailAndEnabledFalseBefore" parameterType="java.time.LocalDateTime" resultMap="userResultMap">
        SELECT *
        FROM users
        WHERE enabled = false
          AND created_at &lt; #{cutoff}
         AND deleted_at IS NULL
    </select>

    <!-- 비활성 계정 전부삭제 -->
    <delete id="deleteAll" parameterType="java.util.List">
        DELETE FROM users
        WHERE user_id IN
        <foreach item="user" collection="users" open="(" separator="," close=")">
            #{user.userId}
        </foreach>
    </delete>


</mapper>